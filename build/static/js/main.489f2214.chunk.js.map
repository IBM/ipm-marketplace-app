{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["Products","React","lazy","Plans","Quote","SwitchComponent","Header","Subscriptions","App","useState","subscriptions","setSubscriptions","rows","setRows","timestamp","setTimestamp","loaderProps","active","withOverlay","small","description","className","Suspense","fallback","Loading","exact","path","render","routeProps","to","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAkBMA,EAAWC,IAAMC,MAAK,kBAAM,uDAC5BC,EAAQF,IAAMC,MAAK,kBAAM,sEACzBE,EAAQH,IAAMC,MAAK,kBAAM,8EACzBG,EAAkBJ,IAAMC,MAAK,kBAC/B,sEAEEI,EAASL,IAAMC,MAAK,kBAAM,+DAC1BK,EAAgBN,IAAMC,MAAK,kBAC7B,4EAkEWM,MA/Df,WAAgB,IAAD,EAC+BP,IAAMQ,SAAS,IAD9C,mBACJC,EADI,KACWC,EADX,OAEaV,IAAMQ,SAAS,IAF5B,mBAEJG,EAFI,KAEEC,EAFF,OAGuBZ,IAAMQ,SAAS,GAHtC,mBAGJK,EAHI,KAGOC,EAHP,KAKLC,EAAc,CAChBC,QAAQ,EACRC,aAAa,EACbC,OAAO,EACPC,YAAa,SACbC,UAAW,mBAGf,OACI,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,kBAACC,EAAA,EAAYR,IACnC,kBAAC,IAAD,KACI,kBAACV,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CACImB,OAAK,EACLC,KAAK,oBACLC,OAAQ,SAACC,GAAD,OAAgB,kBAAC5B,EAAa4B,MAE1C,kBAAC,IAAD,CACIH,OAAK,EACLC,KAAK,oCACLC,OAAQ,SAACC,GAAD,OAAgB,kBAACzB,EAAUyB,MAEvC,kBAAC,IAAD,CACIH,OAAK,EACLC,KAAK,iBACLC,OAAQ,SAACC,GAAD,OAAgB,kBAACxB,EAAUwB,MAEvC,kBAAC,IAAD,CACIH,OAAK,EACLC,KAAK,yBACLC,OAAQ,SAACC,GAAD,OACJ,kBAACrB,EAAD,eACII,iBAAkBA,EAClBD,cAAeA,EACfG,QAASA,EACTD,KAAMA,EACNG,aAAcA,EACdD,UAAWA,GACPc,OAIhB,kBAAC,IAAD,CACIH,OAAK,EACLC,KAAK,sDACLC,OAAQ,SAACC,GAAD,OACJ,kBAACvB,EAAoBuB,MAI7B,kBAAC,IAAD,CAAOD,OAAQ,kBAAM,kBAAC,IAAD,CAAUE,GAAG,4BClElCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.489f2214.chunk.js","sourcesContent":["/*\n#\n# Copyright 2020- IBM Inc. All rights reserved\n# SPDX-License-Identifier: Apache2.0\n#\n*/\nimport React from \"react\";\nimport \"./App.css\";\n\nimport { Loading } from \"carbon-components-react\";\n\nimport {\n    Route,\n    Switch,\n    Redirect,\n    BrowserRouter as Router,\n} from \"react-router-dom\";\n\nconst Products = React.lazy(() => import(\"./Products/ProductsComponent\"));\nconst Plans = React.lazy(() => import(\"./Plans/PlansComponent\"));\nconst Quote = React.lazy(() => import(\"./Quote/QuoteComponent\"));\nconst SwitchComponent = React.lazy(() =>\n    import(\"./SwitchComponent/SwitchComponent\")\n);\nconst Header = React.lazy(() => import(\"./Layout/Header/HeaderComponent\"));\nconst Subscriptions = React.lazy(() =>\n    import(\"./Subscriptions/SubscriptionsComponent\")\n);\n\nfunction App() {\n    const [subscriptions, setSubscriptions] = React.useState([]);\n    const [rows, setRows] = React.useState([]);\n    const [timestamp, setTimestamp] = React.useState(0);\n\n    const loaderProps = {\n        active: true,\n        withOverlay: true,\n        small: false,\n        description: \"Loader\",\n        className: \"suspense-loader\",\n    };\n\n    return (\n        <React.Suspense fallback={<Loading {...loaderProps} />}>\n            <Router>\n                <Header />\n                <Switch>\n                    <Route\n                        exact\n                        path='/partner/products'\n                        render={(routeProps) => <Products {...routeProps} />}\n                    />\n                    <Route\n                        exact\n                        path='/partner/product/:productID/plans'\n                        render={(routeProps) => <Plans {...routeProps} />}\n                    />\n                    <Route\n                        exact\n                        path='/partner/quote'\n                        render={(routeProps) => <Quote {...routeProps} />}\n                    />\n                    <Route\n                        exact\n                        path='/partner/subscriptions'\n                        render={(routeProps) => (\n                            <Subscriptions\n                                setSubscriptions={setSubscriptions}\n                                subscriptions={subscriptions}\n                                setRows={setRows}\n                                rows={rows}\n                                setTimestamp={setTimestamp}\n                                timestamp={timestamp}\n                                {...routeProps}\n                            />\n                        )}\n                    />\n                    <Route\n                        exact\n                        path='/partner/:uuid/:planId/:orderReferenceNumber/switch'\n                        render={(routeProps) => (\n                            <SwitchComponent {...routeProps} />\n                        )}\n                    />\n\n                    <Route render={() => <Redirect to='partner/products' />} />\n                </Switch>\n            </Router>\n        </React.Suspense>\n    );\n}\n\nexport default App;\n","/*\n#\n# Copyright 2020- IBM Inc. All rights reserved\n# SPDX-License-Identifier: Apache2.0\n#\n*/\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*#\n# Copyright 2020- IBM Inc. All rights reserved\n# SPDX-License-Identifier: Apache2.0\n#\n*/\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}